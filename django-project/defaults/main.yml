# The web site secret key. Leave empty will generate one.
# NOTE:  You **NEED** to set this in a multi-units architecture or you will
# have some trouble.
site_secret_key: ''

# Version or origin from which to install.  May be one of the following:
# distro (default), ppa: somecustom/ppa, a deb url sources entry or
# a valid pip line like 'Django' or 'Django==1.5' or a reposiroty url (without the -e).
# Leaving it empty if you don't want the charm to install Django.
django_version: "distro"

# The vcs software to use. Only hg, git, bzr, and svn are currently supported.
vcs: ""

# The vcs url to checkout.
repos_url: ""

#   The vcs user name.
#   Note:  *Subversion only* settings. For other vcs use the repos_url for auth.
repos_username: ""

#   The vcs password.
#   Note:  *Subversion only* settings. For other vcs use the repos_url for auth.
repos_password: ""

# The repo branch to pull out from. If empty, it will pull out the
# default branch or trunk (such as origin/master with git).
# Note that this setting only applies to git. This option is not
# supported for hg. For svn and bzr, specify the branch name as
# part of the URL.
repos_branch: ""

# If not repository url is found, the charm will create a new project. This
# option is the --template argument value for the startproject command
# to use a custom project template.
#
# Django will also accept URLs (http, https, ftp) to compressed
# archives with the app template files, downloading and extracting them on the fly.
# For more informations see:
#   https: //docs.djangoproject.com/en/dev/ref/django-admin/#startproject-projectname-destination
project_template_url: ""

# When Django copies the project template files, it also renders certain
# files through the template engine:  the files whose extensions match the
# --extension option (py by default) and the files whose names are passed with
# the --name option.
project_template_extension: ""

# The root directory to checkout to.
install_root: "/srv/"

# The relative path to install_root where the manage.py
# script is located.
application_path: ""

# base64 encoded string to hold configuration information for the unit.
# The contents will be written to a file named
#  <install_root>/<unit>/unit_config
# where <unit> is the location the branch is extracted to.
unit_config:

# Comma separated extra packages to install.
additional_distro_packages: "python-imaging,python-docutils,python-tz"

# Comma separated extra packages to install.
additional_pip_packages: ""

# Comma separated relative paths or urls to a requirement files. Note that the charm
# won't manually upgrade packages defined in this file.
# Leave the variable to an empty string if you don't want the feature.
requirements_pip_files: ""

# Extra arguments passed to pip.
pip_extra_args: ""

# Comma separated relative paths to requirement files. Note that the charm
# won't manually upgrade packages defined in this file.
# Leave the variable to an empty string if you don't want the feature.
requirements_apt_files: ""

# The Python path to your Django settings module.
# Leave it empty if your settings file is at the root of your repos.
django_settings: ""

# Enable the use of south migrations
django_south: False

# Version or origin from which to install.  May be one of the following:
# distro (default), ppa: somecustom/ppa, a deb url sources entry or
# a valid pip line like 'South' or 'South==0.8.4' or a reposiroty url (without the -e).
# Leaving it empty if you don't want the charm to install South.
django_south_version: "distro"

# Enable disable settings.DEBUG for django
django_debug: False

# A space separated list for settings.ALLOWED_HOSTS in django. Default
# value will be the hostname, fully-qualified name, and public IP.
django_allowed_hosts:

# Allows setting up extra settings.* values for Django. Acceptable
# values are limited to comma delimited key-value pairs like:
#   SETTING_X=foo, SETTING_Y=bar
django_extra_settings:

# The name of the directory where generated url will be written.
# Set the variable to an empty string if you don't want the feature.
urls_dir_name: "juju_urls"

# The place where the code injection path will be append.
# This is relative to the urls_dir_name path define earlier.
urls_injection_path: "urls.py"

# The name of the directory where generated settings will be written.
# Set the variable to an empty string if you don't want the feature.
settings_dir_name: "juju_settings"

# The place where the code injection path will be append.
# This is relative to the settings_dir_name path define earlier.
settings_injection_path: "settings.py"

# The place where the database configuration will be appended or written.
# Set the variable to an empty string if you don't want the feature.
settings_database_name: "60-engine-%(engine_name)s.py"

# The place where the secret key configuration will be appended or written.
# Set the variable to an empty string if you don't want the feature.
settings_secret_key_name: "60-secret.py"

# The place where the amqp configuration will be appended or written.
settings_amqp_name: "60-amqp.py"

# If True, all tasks will be executed locally by blocking until the task returns.
celery_always_eager: "False"

# Set a specific vhost for amqp relation. By default it's the unit_name.
celery_amqp_vhost: ""

# The name of the WSGI application.
wsgi_wsgi_file: "wsgi"

# The number of worker process for handling requests. 0 for count(cpu) + 1
wsgi_workers: 0

# Socket protocol. Can be:  http (default), uwsgi, fastcgi or workers type. Can be:  sync (default), eventlet, gevent, tornado
wsgi_worker_class: ""

# The maximum number of simultaneous clients.
wsgi_worker_connections: 128

# The maximum number of requests a worker will process before restarting.
wsgi_max_requests: 0

# The maximum number of pending connections.
wsgi_backlog: 2048

# Timeout of a request in seconds.
wsgi_timeout: 30

# Keep alive time in seconds.
wsgi_keep_alive: 2

# A bit mask for the file mode on files written.
wsgi_umask: "0002"

# Switch worker processes to run as this user. User id (as an int) or the name.
wsgi_user: "www-data"

# Switch worker process to run as this group. A valid group id (as an int) or the name.
wsgi_group: "www-data"

# The log directory for the wsgi app
wsgi_log_dir: ""

# The log file to write to. If empty the logs would be handle by upstart.
wsgi_log_file: ""

# The granularity of Error log outputs.
wsgi_log_level: "info"

# The Access log file to write to.
wsgi_access_logfile: ""

# The Access log format. Don't forget to escape all quotes and round brackets.
wsgi_access_logformat: ""

# Space separated extra settings. For example:  --debug"
wsgi_extra: ""

# The variable to modify to trigger reloads.
wsgi_timestamp: ""

# Set additionnals, colon separated, PYTHONPATH to the project.
python_path: ""

# IP adresses to listen on. By default we listen on all of them.
listen_ip: "0.0.0.0"

# Port the application will be listenning.
port: 8080
