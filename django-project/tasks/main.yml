# user group ?
- name: Install charm's dependencies
  tags:
    - install
    - upgrade-charm
  apt: pkg={{ item }} state=latest update_cache=yes
  with_items:
    - python-pip
    - python-jinja2
    - mercurial
    - git-core
    - subversion
    - bzr
    - gettext
  register: result
  until: result|success
  retries: 24
  delay: 10

# Django
- name: Install the Django debian package
  tags:
    - install
    - upgrade-charm
  apt: pkg=python-django state=latest update_cache=yes
  when: django_version == 'distro'

- name: Install Django pip package
  tags:
    - install
    - upgrade-charm
  pip: name={{ django_version }} state=latest
  when: django_version != 'distro' and django_version != ''

# South
- name: Install the South debian package
  tags:
    - install
    - upgrade-charm
  apt: pkg=python-django-south state=latest update_cache=yes
  when: django_south_version == 'distro'

- name: Install the South pip package
  tags:
    - install
    - upgrade-charm
  pip: name={{ django_south_version }} state=latest
  when: django_south_version != 'distro' and django_south_version != ''

# Utils
- name: find django admin command
  tags:
    - install
    - upgrade-charm
    - django-settings-relation-joined
    - django-settings-relation-changed
    - pgsql-relation-joined
    - pgsql-relation-changed
    - mysql-relation-joined
    - mysql-relation-changed
    - mysql-root-relation-joined
    - mysql-root-relation-changed
    - mysql-shared-relation-joined
    - mysql-shared-relation-changed
    - mongodb-relation-joined
    - mongodb-relation-changed
    - redis-relation-joined
    - redis-relation-changed
    - amqp-relation-joined
    - amqp-relation-changed
    - cache-relation-joined
    - cache-relation-changed
  shell: command -v /usr/bin/django-admin || command -v /usr/local/bin/django-admin.py
  register: django_admin_cmd

# Django startproject for version >= 1.4 (distro)
- name: Create a Django project
  tags:
      - install
      - upgrade-charm
  shell: PYTHONPATH={{ python_path }} {{ django_admin_cmd.stdout }} startproject {{ sanitized_unit_name }} {{ install_root }} --template {{ project_template_url }} --extension {{ project_template_extension }}
  when: vcs == ''
  register: test_install_root
  ignore_errors: True

# Django startproject for version 1.3

- name: Create a Django project for version 1.3
  tags:
      - install
      - upgrade-charm
  shell: PYTHONPATH={{ python_path }} {{ django_admin_cmd.stdout }} startproject {{ sanitized_unit_name }} chdir={{ install_root }}
  when: test_install_root|failed

# settings injection
- name: Make conf directory for injections
  tags:
    - install
    - upgrade-charm
  command: mkdir {{ working_dir }}/{{ settings_dir_name }} creates={{ working_dir }}/{{ settings_dir_name }}

- name: Test for settings injections
  tags:
    - install
    - upgrade-charm
  command: grep "# The following is the import code for the settings directory injected by Juju" {{ settings_py_path }} chdir={{ working_dir }}/{{ settings_dir_name }}
  register: result_settings_injections
  ignore_errors: True

- name: Create settings injection template
  tags:
    - install
    - upgrade-charm
  template: dest=/tmp/conf_injection.py src=conf_injection.py.j2
  when: result_settings_injections|failed

- name: Inject settings
  tags:
    - install
    - upgrade-charm
  shell: cat /tmp/conf_injection.py >> {{ settings_py_path }} chdir={{ working_dir }}/{{ settings_dir_name }}
  when: result_settings_injections|failed

- name: remove settings temporary template
  tags:
    - install
    - upgrade-charm
  command: rm /tmp/conf_injection.py
  when: result_settings_injections|failed

# url injection
- name: Make urls directory for injections
  tags:
    - install
    - upgrade-charm
  command: mkdir {{ working_dir }}/{{ urls_dir_name }} creates={{ working_dir }}/{{ urls_dir_name }}

- name: Test for urls injections
  tags:
    - install
    - upgrade-charm
  command: grep "# The following is the import code for the urls directory injected by Juju" {{ urls_py_path }} chdir={{ working_dir }}/{{ urls_dir_name }}
  register: result_urls_injections
  ignore_errors: True

- name: Create urls injection template
  tags:
    - install
    - upgrade-charm
  template: dest=/tmp/urls_injection.py src=urls_injection.py.j2
  when: result_urls_injections|failed

- name: Inject urls
  tags:
    - install
    - upgrade-charm
  shell: cat /tmp/urls_injection.py >> {{ urls_py_path }} chdir={{ working_dir }}/{{ urls_dir_name }}
  when: result_urls_injections|failed

- name: remove urls temporary template
  tags:
    - install
    - upgrade-charm
  command: rm /tmp/urls_injection.py
  when: result_urls_injections|failed

# unit_config
- name: Create unit_config file
  tags:
    - install
    - upgrade-charm
  shell: cat "{{ unit_config | b64decode }}" > {{ vcs_clone_dir  }}/unit_config
  when: unit_config != ''


# Templates
- name: Write wsgi.py file.
  tags:
    - install
    - config-changed
    - upgrade-charm
  template:
      src: "wsgi.py.j2"
      dest: "{{ wsgi_py_path }}"
      owner: "{{ wsgi_user }}"
      group: "{{ wsgi_group}}"
      mode: 0640

- name: Generate the secret key if none is provided
  command: pwgen -s 51 1
  register: site_secret_key
  when: site_secret_key == ''

- name: Write secret key file
  tags:
    - install
    - config-changed
    - upgrade-charm
  template:
      src: "secret.py.j2"
      dest: "{{ settings_secret_path }}"
      owner: "{{ wsgi_user }}"
      group: "{{ wsgi_group}}"
      mode: 0640

- name: Write allowed hosts file
  tags:
    - install
    - config-changed
    - upgrade-charm
  template:
      src: "allowed_hosts.py.j2"
      dest: "{{ django_allowed_hosts_path }}"
      owner: "{{ wsgi_user }}"
      group: "{{ wsgi_group}}"
      mode: 0640
  when: django_allowed_hosts != ''

- name: Write django debug file
  tags:
    - install
    - config-changed
    - upgrade-charm
  template:
      src: "debug.py.j2"
      dest: "{{ django_debug_path }}"
      owner: "{{ wsgi_user }}"
      group: "{{ wsgi_group}}"
      mode: 0640
  when: django_debug != ''

- name: Write django extra confg file
  tags:
    - install
    - config-changed
    - upgrade-charm
  template:
    src: "extra-conf.py.j2"
    dest: "{{ django_extra_settings_path }}"
    owner: "{{ wsgi_user }}"
    group: "{{ wsgi_group}}"
    mode: 0640
  when: django_extra_settings != ''



# wsgi relation
- name: sending settings in a wsgi relation
  tags:
    - wsgi-relation-joined
    - wsgi-relation-changed
  command: >
    relation-set
    listen_ip={{ listen_ip }}
    port={{ port }}
    working_dir={{ working_dir }}
    python_path={{ python_path }}
    wsgi_wsgi_file={{ wsgi_wsgi_file }}
    wsgi_workers={{ wsgi_workers }}
    wsgi_worker_class={{ wsgi_worker_class }}
    wsgi_worker_connections={{ wsgi_worker_connections }}
    wsgi_max_requests={{ wsgi_max_requests }}
    wsgi_backlog={{ wsgi_backlog }}
    wsgi_timeout={{ wsgi_timeout }}
    wsgi_keep_alive={{ wsgi_keep_alive }}
    wsgi_umask={{ wsgi_umask }}
    wsgi_user={{ wsgi_user }}
    wsgi_group={{ wsgi_group }}
    wsgi_log_dir={{ wsgi_log_dir }}
    wsgi_log_file={{ wsgi_log_file }}
    wsgi_log_level={{ wsgi_log_level }}
    wsgi_access_logfile={{ wsgi_access_logfile }}
    wsgi_access_logformat={{ wsgi_access_logformat }}
    wsgi_extra={{ wsgi_extra }}
    wsgi_timestamp={{ wsgi_timestamp }}

- name: open port in a wsgi relation
  tags:
    - wsgi-relation-joined
    - wsgi-relation-changed
  command: open-port {{ port }}

- name: close port in a wsgi broken relation
  tags:
    - wsgi-relation-broken
  command: close-port {{ port }}

# django_settings
- name: Trigger django-settings reloading
  tags:
    - upgrade-charm
  command: >
    relation-set -r {{ item.key }}
    django_settings_timestamp={{ ansible_date_time.iso8601_micro }}
  when: relations['django-settings']
  with_dict: relations['django-settings']

- name: django-settings relation
  tags:
    - django-settings-relation-joined
    - django-settings-relation-changed
  command: >
    relation-set
    settings_dir_path={{ settings_dir_path }}
    settings_module={{ settings_module }}
    urls_dir_path={{ urls_dir_path }}
    working_dir={{ working_dir }}
    django_admin_cmd={{ django_admin_cmd.stdout }}
    wsgi_user={{ wsgi_user }}
    wsgi_group={{ wsgi_group }}

#django-settings-relation-broken

# Postgresql relation
- name: Install postgresql dependencies
  tags:
    - pgsql-relation-joined
    - pgsql-relation-changed
  apt: pkg={{ item }} state=latest update_cache=yes
  with_items:
    - python-psycopg2
    - postgresql-client
  register: result
  until: result|success
  retries: 24
  delay: 10

- name: Install postgresql template
  tags:
    - pgsql-relation-joined
    - pgsql-relation-changed
  template:
    src: "pgsql_engine.py.j2"
    dest: "{{ settings_dir_path }}/{{ settings_database_name | regex_replace('%\\(engine_name\\)s', 'pgsql') }}"
    owner: "{{ wsgi_user }}"
    group: "{{ wsgi_group}}"
    mode: 0640
  when: current_relation.database is defined

# pgsql-relation-broken
# run('rm %s' % settings_database_path % {'engine_name': 'pgsql'})


# Mysql relation
- name: Install mysql dependencies
  tags:
    - mysql-relation-joined
    - mysql-relation-changed
    - mysql-root-relation-joined
    - mysql-root-relation-changed
    - mysql-shared-relation-joined
    - mysql-shared-relation-changed
  apt: pkg={{ item }} state=latest update_cache=yes
  with_items:
    - python-mysqldb
    - mysql-client
  register: result
  until: result|success
  retries: 24
  delay: 10

- name: Install mysql template
  tags:
    - mysql-relation-joined
    - mysql-relation-changed
    - mysql-root-relation-joined
    - mysql-root-relation-changed
    - mysql-shared-relation-joined
    - mysql-shared-relation-changed
  template:
    src: "mysql_engine.py.j2"
    dest: "{{ settings_dir_path }}/{{ settings_database_name | regex_replace('%\\(engine_name\\)s', 'mysql') }}"
    owner: "{{ wsgi_user }}"
    group: "{{ wsgi_group}}"
    mode: 0640
  when: current_relation.database is defined

#mysql-relation-broken
#mysql-root-relation-broken
#mysql-shared-relation-broken

# Mongodb relation
- name: Install mongodb dependencies
  tags:
    - mongodb-relation-joined
    - mongodb-relation-changed
  apt: pkg={{ item }} state=latest update_cache=yes
  with_items:
    - python-mongoengine
  register: result
  until: result|success
  retries: 24
  delay: 10

- name: Install mongodb template
  tags:
    - mongodb-relation-joined
    - mongodb-relation-changed
  template:
    src: "mongodb_engine.py.j2"
    dest: "{{ settings_dir_path }}/{{ settings_database_name | regex_replace('%\\(engine_name\\)s', 'mongodb') }}"
    owner: "{{ wsgi_user }}"
    group: "{{ wsgi_group}}"
    mode: 0640
  when: current_relation.hostname is defined

# Redis relation
- name: Install redis dependencies
  tags:
    - redis-relation-joined
    - redis-relation-changed
  apt: pkg={{ item }} state=latest update_cache=yes
  with_items:
    - python-redis
  register: result
  until: result|success
  retries: 24
  delay: 10

- name: Install redis template
  tags:
    - redis-relation-joined
    - redis-relation-changed
  template:
    src: "redis_engine.py.j2"
    dest: "{{ settings_dir_path }}/{{ settings_database_name | regex_replace('%\\(engine_name\\)s', 'redis') }}"
    owner: "{{ wsgi_user }}"
    group: "{{ wsgi_group}}"
    mode: 0640
  when: current_relation.hostname is defined

# redis_relation_broken

# AMQP relation
- name: Install amqp dependencies
  tags:
    - amqp-relation-joined
    - amqp-relation-changed
  pip: name=django-celery state=latest

- name: Install amqp template
  tags:
    - amqp-relation-joined
    - amqp-relation-changed
  template:
    src: "amqp_celery.py.j2"
    dest: "{{ settings_dir_path }}/{{ amqp_path }}"
    owner: "{{ wsgi_user }}"
    group: "{{ wsgi_group}}"
    mode: 0640
  when: current_relation.hostname is defined

# Cache relation
- name: Install cache dependencies
  tags:
    - cache-relation-joined
    - cache-relation-changed
  apt: pkg={{ item }} state=latest update_cache=yes
  with_items:
    - python-memcache
  register: result
  until: result|success
  retries: 24
  delay: 10

- name: Install redis template
  tags:
    - cache-relation-joined
    - cache-relation-changed
  template:
    src: "cache.py.j2"
    dest: "{{ settings_dir_path }}/{{ settings_database_name | regex_replace('%\\(engine_name\\)s', 'memcache') }}"
    owner: "{{ wsgi_user }}"
    group: "{{ wsgi_group}}"
    mode: 0640
  when: current_relation.host is defined

# cache_relation_broken

# website relation
- name: Website relation
  tags:
    - website-relation-joined
    - website-relation-changed
  command: relation-set port={{ port }} hostname={{ unit_public_address }}

# website_relation_broken

# syncdb and migrate
- name: django-settings relation syncdb
  tags:
    - django-settings-relation-joined
    - django-settings-relation-changed
    - pgsql-relation-joined
    - pgsql-relation-changed
    - mysql-relation-joined
    - mysql-relation-changed
    - mysql-root-relation-joined
    - mysql-root-relation-changed
    - mysql-shared-relation-joined
    - mysql-shared-relation-changed
    - amqp-relation-joined
    - amqp-relation-changed
  shell: PYTHONPATH={{ python_path }} {{ django_admin_cmd.stdout }} syncdb --noinput --settings {{ settings_module }} chdir={{ install_root }}
  ignore_errors: True

- name: django-settings relation migrate
  tags:
    - django-settings-relation-joined
    - django-settings-relation-changed
    - pgsql-relation-joined
    - pgsql-relation-changed
    - mysql-relation-joined
    - mysql-relation-changed
    - mysql-root-relation-joined
    - mysql-root-relation-changed
    - mysql-shared-relation-joined
    - mysql-shared-relation-changed
    - amqp-relation-joined
    - amqp-relation-changed
  shell: PYTHONPATH={{ python_path }} {{ django_admin_cmd.stdout }} migrate --settings {{ settings_module }} chdir={{ install_root }}
  when: django_south
  ignore_errors: True

# permissions
# FIXME use wsgi_user
- name: Set the right permissions for working_dir
  tags:
    - install
    - upgrade-charm
    - django-settings-relation-joined
    - django-settings-relation-changed
    - pgsql-relation-joined
    - pgsql-relation-changed
    - mysql-relation-joined
    - mysql-relation-changed
    - mysql-root-relation-joined
    - mysql-root-relation-changed
    - mysql-shared-relation-joined
    - mysql-shared-relation-changed
    - mongodb-relation-joined
    - mongodb-relation-changed
    - redis-relation-joined
    - redis-relation-changed
    - amqp-relation-joined
    - amqp-relation-changed
    - cache-relation-joined
    - cache-relation-changed
  file:
    path={{ vcs_clone_dir }}
    owner={{ wsgi_user }}
    group={{ wsgi_group }}
    recurse=yes state=directory

# wsgi
- name: Restart wsgi
  # Trigger the wsgi subordinate to restart by changing settings.
  tags:
    - config-changed
    - upgrade-charm
    - django-settings-relation-joined
    - django-settings-relation-changed
    - pgsql-relation-joined
    - pgsql-relation-changed
    - pgsql-relation-broken
    - mysql-relation-joined
    - mysql-relation-changed
    - mysql-root-relation-joined
    - mysql-root-relation-changed
    - mysql-shared-relation-joined
    - mysql-shared-relation-changed
    - mongodb-relation-joined
    - mongodb-relation-changed
    - mongodb_relation_broken
    - redis-relation-joined
    - redis-relation-changed
    - redis_relation_broken
    - amqp-relation-joined
    - amqp-relation-changed
    - amqp_relation_broken
    - cache-relation-joined
    - cache-relation-changed
    - cache_relation_broken
  command: >
    relation-set -r {{ item.key }}
    wsgi_timestamp={{ ansible_date_time.iso8601_micro }}
  when: relations['wsgi']
  with_dict: relations['wsgi']

# start and stop hooks
- name: Start Gunicorn
  tags:
    - start
  command: service gunicorn start || service gunicorn restart
  ignore_errors: True

- name: Stop Gunicorn
  tags:
    - stop
  command: service gunicorn start || service gunicorn restart
  ignore_errors: True
